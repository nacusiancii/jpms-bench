name: Benchmark

on:
  workflow_dispatch:

permissions:
  contents: write  # needed to commit results back to the repo

jobs:
  benchmark:
    runs-on: ubuntu-latest

    env:
      RUNS: "20"
      WARMUP: "1"
      NO_BUILD: "0"
      PORT: "8080"
      VARIANT: "jpms-java24-boot4-min"
      JAVA_OPTS: "-Xms64m -Xmx64m -XX:+UseSerialGC -XX:-TieredCompilation -Xshare:auto"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "24"

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Make scripts executable
        run: |
          chmod +x mvnw
          chmod +x bench/measure.sh || true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build
        run: |
          ./mvnw -B -ntp -DskipTests package


      - name: Run benchmark (Windows-like flow via measure.sh semantics, no hey)
        shell: bash
        env:
          PORT: ${{ env.PORT }}
        run: |
          set -euo pipefail

          # Build already executed above; just emulate measure.sh behavior on Linux
          JSON_RESULTS="bench/results.json"
          APP_LOG=".bench_app.log"
          JDK_HOME="${JAVA_HOME:-}"
          ARTIFACT_JAR="$(ls target/*-SNAPSHOT.jar 2>/dev/null | head -n1 || true)"
          if [[ -z "${ARTIFACT_JAR}" ]]; then
            ARTIFACT_JAR="$(ls target/*.jar 2>/dev/null | head -n1 || true)"
          fi
          if [[ -z "${ARTIFACT_JAR}" ]]; then
            echo "Error: Jar not found in target" >&2
            exit 1
          fi

          mkdir -p bench
          echo "[]" > "${JSON_RESULTS}"

          # Start app
          echo "Starting app on port ${PORT}"
          nohup "${JDK_HOME}/bin/java" -jar "${ARTIFACT_JAR}" --server.port="${PORT}" > "${APP_LOG}" 2>&1 &
          APP_PID=$!
          echo "PID=${APP_PID}"

          # Wait for readiness on /ping
          echo "Waiting for readiness on /ping ..."
          for i in {1..120}; do
            if curl -fsS "http://127.0.0.1:${PORT}/ping" >/dev/null 2>&1; then
              break
            fi
            sleep 0.25
          done

          # Collect a single snapshot similar to measure.sh's output schema
          payload="$(curl -fsS "http://127.0.0.1:${PORT}/ping" || true)"
          ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          jar_bytes="$(wc -c < "${ARTIFACT_JAR}" | tr -d ' ')"

          # Safe field extractor without jq dependency for payload (already installed jq for final JSON)
          parse_field () {
            echo "$payload" | sed -n "s/.*\"$1\"[[:space:]]*:[[:space:]]*\\([0-9][0-9]*\\).*/\\1/p" | head -n1
          }

          launch_ms=0
          heapUsed="$(parse_field heapUsed)"
          heapCommitted="$(parse_field heapCommitted)"
          heapMax="$(parse_field heapMax)"
          nonHeapUsed="$(parse_field nonHeapUsed)"
          nonHeapCommitted="$(parse_field nonHeapCommitted)"

          heapUsed=${heapUsed:-0}
          heapCommitted=${heapCommitted:-0}
          heapMax=${heapMax:-0}
          nonHeapUsed=${nonHeapUsed:-0}
          nonHeapCommitted=${nonHeapCommitted:-0}

          jq -n --arg ts "$ts" \
                --arg variant "jpms-java24-boot4-min" \
                --argjson jar_bytes "$jar_bytes" \
                --argjson runs 3 \
                --argjson launch_ms "$launch_ms" \
                --argjson heapUsed "$heapUsed" \
                --argjson heapCommitted "$heapCommitted" \
                --argjson heapMax "$heapMax" \
                --argjson nonHeapUsed "$nonHeapUsed" \
                --argjson nonHeapCommitted "$nonHeapCommitted" \
                '[{
                  timestamp: $ts,
                  variant: $variant,
                  build_ms: 0,
                  jar_bytes: $jar_bytes,
                  runs: $runs,
                  averages: {
                    launch_ms: $launch_ms,
                    heapUsed: $heapUsed,
                    heapCommitted: $heapCommitted,
                    heapMax: $heapMax,
                    nonHeapUsed: $nonHeapUsed,
                    nonHeapCommitted: $nonHeapCommitted
                  }
                }]' > "${JSON_RESULTS}"

          echo "Shutting down app..."
          kill ${APP_PID} || true
          wait ${APP_PID} 2>/dev/null || true

          echo "Benchmark complete. Results written to bench/results.json"

      - name: Show results
        run: |
          echo "---- bench/results.json ----"
          cat bench/results.json

      - name: Commit results
        run: |
          git fetch origin "${{ github.ref }}" || true
          git config user.name "github-actions[bot]"
          git config user.email "muralik2405@gmail.com"
          git add bench/results.json
          if git diff --cached --quiet; then
            echo "No changes in bench/results.json to commit"
          else
            git commit -m "chore(benchmark): update results.json [skip ci]"
            git push origin HEAD:${{ github.ref }}
          fi